{"version":3,"sources":["components/HCIcon/HCIcon.jsx","components/FeatureItem/FeatureItem.jsx","components/FeatureList/FeatureList.jsx","App.jsx","index.js"],"names":["HCIcon","props","className","this","type","disabled","Component","iconLookup","text","iconRef","Object","keys","find","icon","some","token","toLowerCase","includes","FeatureItem","state","expanded","toggleList","bind","childFeaturesElement","expandElement","item","title","presence","subfeatures","attrs","classNames","length","items","level","push","join","onClick","setState","FeatureList","noDataElement","map","index","key","App","features","fetch","response","json","console","log","ReactDOM","render","document","getElementById"],"mappings":"4WAwBeA,G,kBAZb,WAAYC,GAAQ,qEACZA,I,sEAGN,IAAIC,EAAS,qBAAiBC,KAAKF,MAAMG,KAA5B,YAEb,OADAF,GAAcC,KAAKF,MAAMI,SAAY,qBAAuB,GAE1D,0BAAMH,UAAWA,Q,GARFI,c,MCsDrB,SAASC,EAAWC,GAClB,IAAMC,EAAU,CACd,OAAU,CAAC,UACX,MAAS,CAAC,QAAS,OACnB,OAAU,CAAC,UACX,KAAQ,CAAC,QACT,mBAAoB,CAAC,sBAEvB,OAAOC,OAAOC,KAAKF,GAASG,MAAK,SAACC,GAEhC,OADeJ,EAAQI,GAAMC,MAAK,SAACC,GAAD,OAAWP,EAAKQ,cAAcC,SAASF,UAErE,GAGOG,M,YAjEb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXC,UAAU,GAEZ,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALD,E,sEAQjB,IAAIC,EACAC,EAFG,EAGgCrB,KAAKF,MAAMwB,KAA3CC,EAHA,EAGAA,MAAOC,EAHP,EAGOA,SAAUC,EAHjB,EAGiBA,YAElBC,EAAQ,GAERC,EAAa,CAChBH,EAAY,wBAA0B,wBAWzC,OARGC,EAAYG,OAAS,IACtBP,EAAgB,yBAAKtB,UAAU,yBAC/BqB,EAAuB,kBAAC,EAAD,CAAaH,SAAUjB,KAAKgB,MAAMC,SAAUY,MAAOJ,EAAaK,MAAO9B,KAAKF,MAAMgC,MAAQ,IACjHH,EAAWI,KAAK,6BAEhBL,EAAM,iBAAmB1B,KAAKgB,MAAMC,UAIpC,sCAAIlB,UAAW,CAAC,gBAAD,OAAoB4B,GAAYK,KAAK,MAAUN,GAC5D,4BAAQ3B,UAAU,uBAAuBkC,QAASjC,KAAKkB,YACpDG,EACD,kBAAC,EAAD,CAAQpB,KAAMG,EAAWmB,GAAQrB,UAAWsB,IAC5C,yBAAKzB,UAAU,8BAA8BwB,IAE9CH,K,mCAKLpB,KAAKkC,SAAS,CACZjB,UAAWjB,KAAKgB,MAAMC,e,GAxCFd,aCyBXgC,G,kBA3Bb,WAAYrC,GAAQ,qEACZA,I,sEAGN,IAQIsC,EAREN,EAAQ9B,KAAKF,MAAMgC,OAAS,EAE5BJ,EAAQ,GAUd,OATa,IAAVI,IACDJ,EAAM,iBAAmB1B,KAAKF,MAAMmB,UAKP,IAA5BjB,KAAKF,MAAM+B,MAAMD,SAClBQ,EAAgB,wBAAIrC,UAAU,0BAG9B,sCAAIA,UAAU,gBAAmB2B,GAC9B1B,KAAKF,MAAM+B,MAAMQ,KAAI,SAACf,EAAMgB,GAC3B,OAAO,kBAAC,EAAD,CAAaC,IAAG,uBAAkBT,EAAlB,YAA2BQ,GAAShB,KAAMA,EAAMQ,MAAOA,EAAM,OAErFM,O,GAtBiBjC,cCuBXqC,E,YA7Bb,WAAY1C,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXyB,SAAU,IAHK,E,sEAOjB,OACE,6BACE,kBAAC,EAAD,CAAaZ,MAAO7B,KAAKgB,MAAMyB,c,qLAOVC,MAAM,kB,cAAvBC,E,gBACiBA,EAASC,O,OAA1BH,E,OACNzC,KAAKkC,SAAS,CACZO,a,kDAKFI,QAAQC,IAAR,M,qHAzBY3C,a,MCElB4C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cbc734a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './HCIcon.scss';\n\n/**\n  * @class HCIcon\n  * @description Defines a component wrapper for the features list.\n  * This component has an added feature of display a \"disabled\" bar over the icon.\n  * The font-family was taken from the hipcamp.com website.\n  * @props {string} type - the type of icon to render.\n  * @props {boolean} disabled - whether the icon is disabled or not.\n */\nclass HCIcon extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    let className = `hc-awesome-${this.props.type} hc-icon`;\n    className += (this.props.disabled) ? ' hc-icon--disabled' : '';\n    return (\n      <span className={className}></span>\n    );\n  }\n}\n\nexport default HCIcon;\n","import React, { Component } from 'react';\nimport FeatureList from '../FeatureList/FeatureList.jsx';\nimport HCIcon from '../HCIcon/HCIcon.jsx';\nimport './FeatureItem.scss';\n\n/**\n * @class FeatureItem\n * @description Defines a li element that displays a feature of a campsite, whether it's\n * available, and optional subfeatures.\n * @props {string} item.title - the title of the feature\n * @props {boolean} item.presence - if the feature is available or not at the site\n * @props {array} item.subfeatures - if the feature has any subfeatures (empty array if none)\n */\nclass FeatureItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n    };\n    this.toggleList = this.toggleList.bind(this);\n  }\n  render() {\n    let childFeaturesElement;\n    let expandElement;\n    const {title, presence, subfeatures} = this.props.item;\n    // Dynamically changing or logic level attributes.\n    const attrs = {};\n    // Static styling of the item\n    const classNames = [\n      (presence) ? 'feature-item--present' : 'feature-item--absent',\n    ];\n\n    if(subfeatures.length > 0) {\n      expandElement = <div className=\"feature-item__toggle\"></div>;\n      childFeaturesElement = <FeatureList expanded={this.state.expanded} items={subfeatures} level={this.props.level + 1}/>\n      classNames.push('feature-item--collapsible');\n      // Add an expanded to the current element\n      attrs['data-expanded'] = this.state.expanded;\n    }\n\n    return (\n      <li className={['feature-item', ...classNames].join(' ')} {...attrs}>\n        <header className=\"feature-item__header\" onClick={this.toggleList}>\n          {expandElement}\n          <HCIcon type={iconLookup(title)} disabled={!presence}/>\n          <div className=\"feature-item-header__title\">{title}</div>\n        </header>\n        {childFeaturesElement}\n      </li>\n    );\n  }\n  toggleList() {\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  }\n}\n\n/**\n * @function iconLookup \n * @description Assuming that the API is a constraint and not modifying\n * it's results to pass the icon type, this function fuzzy matches a string \n * (can be a sentence) with an icon.\n * @param {String} text - A string to search for keywords\n */\nfunction iconLookup(text) {\n  const iconRef = {\n    'toilet': ['toilet'],\n    'trash': ['trash', 'bin'],\n    'shower': ['shower'],\n    'pets': ['pets'],\n    'signs-left-right': ['pack in, pack out']\n  };\n  return Object.keys(iconRef).find((icon) => {\n    const result = iconRef[icon].some((token) => text.toLowerCase().includes(token)); \n    return result;\n  }) || '';\n}\n\nexport default FeatureItem;\n","import React, { Component } from 'react';\nimport FeatureItem from '../FeatureItem/FeatureItem.jsx';\nimport './FeatureList.scss';\n\n/**\n  * @class FeatureList\n  * @description Defines a list of FeatureItems. Acts as a recursive shell to iterate subfeatures.\n  * @props {string} key - The title of the feature.\n  * @props {number} level - The depth of the feature list if its nested, 0 otherwise.\n */\nclass FeatureList extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const level = this.props.level || 0;\n    const classState = 'feature-list' ;\n    const attrs = {};\n    if(level !== 0) {\n      attrs['data-expanded'] = this.props.expanded;\n    }\n\n    // \"No data\"/loading state - for when the API has an error, or connection is slow.\n    let noDataElement;\n    if(this.props.items.length === 0) {\n      noDataElement = <li className=\"feature-list__nodata\"></li>;\n    }\n    return (\n      <ul className='feature-list' {...attrs}>\n        {this.props.items.map((item, index) => {\n          return <FeatureItem key={`feature-item-${level}-${index}`} item={item} level={level+1}/>\n        })}\n        {noDataElement}\n      </ul>\n    );\n  }\n}\n\nexport default FeatureList;\n","import React, { Component } from 'react';\nimport FeatureList from './components/FeatureList/FeatureList.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      features: [],\n    };\n  }\n  render() {\n    return (\n      <div>\n        <FeatureList items={this.state.features}/>\n      </div>\n    );\n  }\n  async componentDidMount() {\n    try { \n      // Fetch the features from the 'api'\n      const response = await fetch('/features.json');\n      const features = await response.json();\n      this.setState({\n        features,\n      });\n      \n    } catch(error) {\n      // TODO: Out of scope for this exercise, but might pop an error modal to inform the user.\n      console.log(error);\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport './App.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}